/*
 *  使用栈完成中序表达式转后序表达式
 *
 *  输入：['12', '+', '3']
 *  输出：['12', '3', '+']
 *
 *  (1 + (4 + 5 + 3) - 3) + (9 + 8)
 *  输入：['(', '1', '+', '(' + '4', '+', '5', '+', '3', ')', '-', '3', ')', '+', '(', '9', '+', '8', ')']
 *  输出：['1', '4', '5', '+', '3', '+', '+', '3', '-', '9', '8', '+', '+']
 *
 *  (1 + (4 + 5 + 3) / 4 - 3) + (6 + 8) * 3
 *  输出：['1', '4', '5', '+', '3', '+', '4', '/', '+', '3', '-', '6', '8', '+', '3', '*', '+']
**/

/*
* 	思路分析：
*			1.建立一个运算符优先级的表、一个用于临时存储左括号和操作数
* 		2.遍历传入的中序表达式数组，并对每个元素进行如下操作:
* 				* 如果是数字或者左括号则直接入栈
* 				* 如果是右括号则不断把栈顶元素弹出，直至遇到左括号，同时使左括号出栈
* 				* 如果遇到运算符(不在栈中)，首先判断栈顶元素是不是运算符
* 						如果不是，则直接进入 postfixList
* 						如果是，则判断优先级，如果栈顶的运算符优先级高或相同则先让栈顶的运算符进入 postfixList,最后自己再进入 postfixList
* 						否则，直接将当前运算符推入 postfixList
**/
import Stack from './stack'

export default function infixExp2PostfixExp(expression: string[]) {
	const stack = new Stack()
	const postfixList: string[] = []
	// ##BEGIN## 代码已加密
HHAHjlHj0HjNHj6HjEHHmHj0HjhHjDHj/HjYHjEHj0Hj/Hj6HHmHjjHHmHjOHHlHHMHHlHH1HHmHHlHHTHHlHH1HHmHHlHHXHHlHH1HHmHHlHHqHHlHjG
HHAHjlHj0HjNHj6HjEHHmHj0HjhHjDHj/HjYHjEHj0Hj/HjaHj/HjTHj0Hj/HjTHjEHgjHHmHjjHHmHgI
HHAHHAHHlHHMHHlHH7HHmHHZHH1
HHAHHAHHlHHTHHlHH7HHmHHZHH1
HHAHHAHHlHHXHHlHH7HHmHHNHH1
HHAHHAHHlHHqHHlHH7HHmHHNHH1
HHAHgS
HHAHjEHgjHjhHjDHHmHj0HjhHjDHj/HjYHjEHj0Hj/Hj6HHmHjjHHmHjqHjDHgjHj0HjXHHmHjEHgjHjhHjDHj0HjXHHmHj0HjhHjDHj/HjYHjEHj0Hj/HjaHj/HjTHj0Hj/HjTHjEHgj
HHAHjLHjDHjEHHmHjlHH7HHmHj6HjEHj/HjTHjNHjM

HHAHjXHj0Hj/HHmHH5HjLHjDHjEHHmHjTHHmHjjHHmHHLHHUHHmHjTHHmHjHHHmHjDHgHHjhHj/HjDHj6Hj6HjTHj0HjNHHeHjLHjDHjNHjMHjEHj1HHUHHmHjTHHMHHMHHDHHmHgI
HHAHHAHjlHHmHjjHHmHjDHgHHjhHj/HjDHj6Hj6HjTHj0HjNHjOHjTHjG
HHAHHAHHqHHqHHmd2/BwyBxUBVLdzM
HHAHHAHjTHjXHHmHH5HHGHjTHj6HjQHjYHjQHH5HjQHj+HjZHjnHjDHj/HH5HjlHHDHHDHHDHHmHgI
HHAHHAHHAHjhHj0Hj6HjEHjXHjTHgHHjiHjTHj6HjEHHeHjhHj+Hj6Hj1HH5HjlHHD
HHAHHAHgSHHmHjDHjLHj6HjDHHmHjTHjXHHmHH5HjlHHmHjjHjjHjjHHmHHlHH5HHlHHDHHmHgI
HHAHHAHHAHj6HjEHjYHjlHjqHHeHjhHj+Hj6Hj1HH5HjlHHD
HHAHHAHgSHHmHjDHjLHj6HjDHHmHjTHjXHHmHH5HjlHHmHjjHjjHjjHHmHHlHHDHHlHHDHHmHgI
HHAHHAHHAHHqHHqHHmWxrSN5S7vBgyS7xdG2BHtBRhWNoSeM4phdeJSZeQ4V4CmSN5WxrSN5d5nBgyS7x
HHAHHAHHAHjUHj1HjTHjLHjDHHmHH5Hj6HjEHjYHjlHjqHHeHjEHj0HjhHH5HHDHHmHHGHjjHjjHHmHHlHH5HHlHHDHHmHgI
HHAHHAHHAHHAHjhHj0Hj6HjEHjXHjTHgHHjiHjTHj6HjEHHeHjhHj+Hj6Hj1HH5Hj6HjEHjYHjlHjqHHeHjhHj0HjhHH5HHDHHD
HHAHHAHHAHgS
HHAHHAHHAHj6HjEHjYHjlHjqHHeHjhHj0HjhHH5HHDHHmHHqHHqHHmd5nBgyS7xSZeBRh
HHAHHAHgSHHmHjDHjLHj6HjDHHmHgI
HHAHHAHHAHHqHHqHHmWbu4q=4Tt
HHAHHAHHAHHqHHqHHmd2/BwyWxrSN5Wbu4q=4TtQ4VSNJBHtBRhWNo4f5Wbu4q=4TtdeJSZeQ4V4CmSN5BRhWNo4f5Wbu4q=4TtSYcSeLAHRdmqSrWdeMS0AWbu4q=4Tt
HHAHHAHHAHjUHj1HjTHjLHjDHHmHH5
HHAHHAHHAHHAHHGHj6HjEHjYHjlHjqHHeHjTHj6HjAHjZHjhHjEHgjHH5HHDHHmHHnHHn
HHAHHAHHAHHAHj0HjhHjDHj/HjYHjEHj0Hj/Hj6HHeHjTHjNHj5HjDHgHHj=HjXHH5Hj6HjEHjYHjlHjqHHeHjEHj0HjhHH5HHDHHDHHmHHGHjjHjjHHmHHTHHZHHmHHnHHn
HHAHHAHHAHHAHHqHHqHHmSYcSeLAHRB5yWV=vH54f5Wbu4q=4TtB=YWDaWbu4q=Q4VdUVSuYWV=S0ABSVSqJBVLAHh
HHAHHAHHAHHAHj0HjhHjDHj/HjYHjEHj0Hj/HjaHj/HjTHj0Hj/HjTHjEHgjHjOHj6HjEHjYHjlHjqHHeHjEHj0HjhHH5HHDHHmHjYHj6HHmHj0HjhHjDHj/HjYHjEHj0Hj/Hj6HjGHHmHjgHjjHHmHj0HjhHjDHj/HjYHjEHj0Hj/HjaHj/HjTHj0Hj/HjTHjEHgjHjOHjlHHmHjYHj6HHmHj0HjhHjDHj/HjYHjEHj0Hj/Hj6HjG
HHAHHAHHAHHDHHmHgI
HHAHHAHHAHHAHHqHHqHHmBHtdeJSZe4f5Wbu4q=4TtShmSqJSN5HHmHjhHj0Hj6HjEHjXHjTHgHHjiHjTHj6HjEHHmSGG
HHAHHAHHAHHAHjhHj0Hj6HjEHjXHjTHgHHjiHjTHj6HjEHHeHjhHj+Hj6Hj1HH5Hj6HjEHjYHjlHjqHHeHjhHj0HjhHH5HHDHHD
HHAHHAHHAHgS
HHAHHAHHAHHqHHqHHmdeMS0A4f5Wbu4q=4TtSqJBRh
HHAHHAHHAHj6HjEHjYHjlHjqHHeHjhHj+Hj6Hj1HH5HjlHHD
HHAHHAHgS
HHAHgS

HHAHHqHHqHHmHjXHj0Hj/HHmdLW4brAjBB2IS7nBRhWwyS7BAW2Wb1B=YSeM4phQ4VWQYdeJSZeBv7SqJSN5HHmHjhHj0Hj6HjEHjXHjTHgHHjiHjTHj6HjEHHmSGG
HHAHjUHj1HjTHjLHjDHHmHH5HHGHj6HjEHjYHjlHjqHHeHjTHj6HjAHjZHjhHjEHgjHH5HHDHHDHHmHgI
HHAHHAHjhHj0Hj6HjEHjXHjTHgHHjiHjTHj6HjEHHeHjhHj+Hj6Hj1HH5Hj6HjEHjYHjlHjqHHeHjhHj0HjhHH5HHDHHD
HHAHgS
	// ##END##
	return postfixList
}
